/// <reference lib="webworker" />

import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

const fetchAsDataURL = async (url: string): Promise<string> => {
  const response = await fetch(url);
  const blob = await response.blob();
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onloadend = () => resolve(reader.result as string);
    reader.onerror = reject;
    reader.readAsDataURL(blob);
  });
};

addEventListener('message', async ({ data }) => {
  const { reportContent } = data;

  try {
    const doc = new jsPDF('p', 'mm', 'a4');
    const logoUrl = 'assets/logo.jpg';
    const logoDataUrl = await fetchAsDataURL(logoUrl);

    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const margin = 15;
    let currentY = margin;

    // Header
    doc.addImage(logoDataUrl, 'JPEG', margin, currentY, 40, 15);
    currentY += 20;
    doc.setDrawColor(255, 215, 0); // Yellow color for the line
    doc.setLineWidth(0.5);
    doc.line(margin, currentY, pageWidth - margin, currentY);
    currentY += 10;

    // Title
    doc.setFontSize(22);
    doc.setFont('helvetica', 'bold');
    doc.text('Environmental Lifecycle Report', pageWidth / 2, currentY, { align: 'center' });
    currentY += 15;

    // Content
    const usableWidth = pageWidth - 2 * margin;

    for (const element of reportContent) {
      if (currentY > pageHeight - margin) {
        doc.addPage();
        currentY = margin;
      }

      switch (element.type) {
        case 'h3':
          doc.setFontSize(14);
          doc.setFont('helvetica', 'bold');
          const h3Lines = doc.splitTextToSize(element.text, usableWidth);
          doc.text(h3Lines, margin, currentY);
          currentY += (h3Lines.length * 7) + 2;
          break;
        case 'p':
          doc.setFontSize(10);
          doc.setFont('helvetica', 'normal');
          const pLines = doc.splitTextToSize(element.text, usableWidth);
          doc.text(pLines, margin, currentY);
          currentY += (pLines.length * 5) + 2;
          break;
        case 'ul':
          doc.setFontSize(10);
          doc.setFont('helvetica', 'normal');
          element.items.forEach((item: string) => {
            if (currentY > pageHeight - margin) {
              doc.addPage();
              currentY = margin;
            }
            const itemLines = doc.splitTextToSize(`â€¢ ${item}`, usableWidth - 5);
            doc.text(itemLines, margin + 5, currentY);
            currentY += (itemLines.length * 5) + 2;
          });
          break;
        case 'table':
          autoTable(doc, {
            head: element.head,
            body: element.body,
            startY: currentY,
            theme: 'grid',
            headStyles: {
              fillColor: '#FFC107',
              textColor: '#000000'
            },
            didDrawPage: (data) => {
               currentY = data.cursor?.y ?? currentY;
            }
          });
          currentY = (doc as any).lastAutoTable.finalY + 10;
          break;
      }
    }

    // Footer
    const totalPages = (doc as any).internal.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      doc.setTextColor(150);
      doc.text(
        `Page ${i} of ${totalPages} - This report was generated by AI. View our terms and conditions`,
        pageWidth / 2,
        pageHeight - 10,
        { align: 'center' }
      );
    }

    const pdfBlob = doc.output('blob');
    postMessage({ success: true, pdfBlob });

  } catch (error) {
    console.error('Error generating PDF in worker:', error);
    postMessage({ success: false, error: 'Failed to generate PDF' });
  }
});
