name: Build, Push Docker Image to GHCR & Deploy on Docker Swarm

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GIT_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.staging
          push: true
          tags: ghcr.io/initd-itservices/probuild-onboarding-ui:${{ github.sha }}

      - name: Deploy to Docker Swarm
        uses: appleboy/ssh-action@v0.1.1
        with:
          host: ${{ secrets.SWARM_MANAGER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            # Login to GitHub Container Registry
            echo "${{ secrets.GIT_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            docker pull ghcr.io/initd-itservices/probuild-onboarding-ui:${{ github.sha }}

            # Deployment variables
            SERVICE_NAME="probuild-ui"
            IMAGE="ghcr.io/initd-itservices/probuild-onboarding-ui:${{ github.sha }}"
            REPLICAS=1
            PORT_MAPPING="80:80"
            BACKEND_HOST=${{ secrets.BACKEND_HOST }}

            # Check if the service already exists
            if [ $(docker service ls --filter name=$SERVICE_NAME -q | wc -l) -eq 0 ]; then
                # Create the service if it doesn't exist
                docker service create \
                  --name $SERVICE_NAME \
                  --replicas $REPLICAS \
                  --publish $PORT_MAPPING \
                  --env BACKEND_HOST="$BACKEND_HOST" \
                  $IMAGE
            else
                # Update the existing service
                docker service update \
                  --image $IMAGE \
                  --replicas $REPLICAS \
                  --env-add BACKEND_HOST="$BACKEND_HOST" \
                  $SERVICE_NAME
            fi